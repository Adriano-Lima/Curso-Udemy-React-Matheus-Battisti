Meu repositório: https://github.com/Adriano-Lima/Curso-Udemy-React-Matheus-Battisti

Curso JavaScript
	https://youtu.be/OYPbr6ZG3pc

>> Seção 1: Introdução
	Matheus Battisti (Youtube)
		Repositorio do Curso:
			https://github.com/matheusbattisti/curso_react
		O repositório do projeto do TMDB (API de filmes) é este: 
			https://github.com/matheusbattisti/movies_lib/tree/main	

	é uma Biblioteca JavaScript
	Arquitetura baseada em componentes

	criando um projeto:
		npx create-react-app <nome>

		criando com o Vite:
			instala menos coisas que o padrao (projeto mais limpo)
			build mais rapido 
			npm create vite@latest


	rodar um projeto:
		npm start
		usando o Vite:
			npm run dev

	Estrutura base:
		node_modules
		public: html de inicializacao
		src: onde programamos os apps
		src/index.js: arquivo de inicializacao do React
		src/App.js: Componente principal da aplicacao

	Extensão para react:
		ES7+ React/Redux/React-Native
			rafce (criar componente)

>> Seção 2
	
	Criando um novo componente
		const NomeComoponente = () => {
			return (
				<div></div>
			);
		}
		export default NomeComoponente;
	
	
	Importação de componentes
		import X from './components/X'	
			se eu importar dessa forma eu importo o default
			mas se quiser impotar outra funcao por exemplo do arquivo
				import {NovoMenu} from './DivMenu'

	JSX
		tudo que fica dentro do return de um componente é um JSX 

	Comentários
		// algum Comentário ou /* */ no JS 
		{/* */} no JSX

		Ver dados no console do navegador (para debug por exemplo)
		console.log("")	
		alert(`nome:${nome}`)

>> Seção 3: Avançando no React	
	Imagens
		Se a imagem estiver na pasta public
			<img src="/img1.jpg" alt="Paisagem" />
		Se estiver na pasta assets
			import City from './assets/city.jpg'
			<img src={City} alt="Cidade" />

	Hooks
		recursos do React
		começam com use, ex: useState
		precisam ser importados

		import { useState } from "react";
		const [number,setNumber] = useState(5);
			useState sempre retorna uma array 
			quando uma variavel esta sendo controlada pelo useState muda seu valor, ele faz uma rendirizacao do componente que esta utilizando esta variavel 

		criando um hook (Hook personalizado)
			- é uma funcao criada em um arquivo reparado e que irá gerenciar algum(s) estado(s)
				ex: crio um arquivo na pasta hooks chamado useRequest.js
				export const useRequest = () => {
					const [loading,setLoading] = useState(false)

					const getRequest = async (url) => {
						setLoadind(true)
						....
					}
					...
					return {loading,getRequest}
				}
			
			- onde vai usar o hook:
				const {loading,getRequest} = useRequest ()
		
		Renderizacao Condicional 
			{x && <p> X é true </p>}
			{name  === 'Joao' ? (<p>O nome do cliente é Joao</p>) : (<p>O nome nao e Joao</p>)}
		

	Lista 
		const [list] = useState(["Matheus","Pedro","Adriano"])
		<ul>
            {list.map((item,i)=> (
                <li key={i}>{item}</li>
            ))}
        </ul>	

	Props
		Permite passar valores de componente pai para um componente filho
		vem em um objeto no argumento da funcao do componente
		- exemplos em ShowUserName, CarDetails

		no componente pai 
			<DivMenu titulo="teste">Carro Novo</DivMenu>
		
		no componente filho
			const DivMenu = (props) => {
				return {
					<div>
						<h1>{props.titulo}</h1>
						<h2>{props.children}</h2>
					</div>
				}
			}
			// ou usando a desestruturacao 
			const DivMenu = ({titulo, children}) => {
				return {
					<div>
						<h1>{titulo}</h1>
						<h2>{children}</h2>
					</div>
				}
			}

		// podemos passar funcoes tbm via props
			no componente pai:
				function MyFunction(){ ... }
				<MeuComponente func={MyFunction} />
			no componente filho
				const MeuComponente = ({MyFunction}) => {
					<button onClick={MyFunction}>Executar funcao</button>
				}	

	Elevação de state (State lift)
		quando um valor é elevado do componente filho para o pai 
		no pai temos um state, e dois componentes filhos, um que vai consumir o valor do state e outro que vai modificar o valor do state 

>> Seção 4
	CSS global 
		utilizado para estilizar varios elementos
		utilizamos no arquivo index.css na pasta src 
	
	CSS de componente 
		cria-se um arquivo de css com o mesmo nome do componente 
		importado no componente
		tomar cuidado pois vaza para toda aplicação

	Inline style
		<p style={ {color:"bule",padding:"25px",borderTop:"2px solid red" } }>Este elemento foi estilzado de forma inline</p>

	Inline style Dinamico
		<h2 style={ n<10? ({color:"purple"}): ({color:"green"}) }>CSS Dinâmico</h2>

	Classe Dinamica
		<h2 className={redTitle ? "red-title":"title" }>Esse titulo vai ter uma classe dinamica</h2>

	CSS Modulos
		nao vaza 
		Componente.module.css 
		precisamos importar no compomente

>> Seção 5: Formulários com React

>> Seção 6: Projeto Word Secret

>> Seção 7: Requisições HTTP com React
	Json Server
		simula uma API
		npm i json-server (na pasta do projeto)
		add um pasta data na raiz do projeto e adicionar um arquivo chamado db.json 
			{
				"products": [
					{
					"id": 1,
					"name": "Camisa",
					"price": 59.9
					}
				]
			}
		Add em package.json (scripts)
			"server":"json-server --watch data/db.json"
		para executar:
			npm run server 	

	Fazendo requisicoes
		//GET
		const fetchData = async () => {
		    let res = await fetch(url)
		    res = await res.json()
		    setProducts(res)
	    }
	    //POST
		const fetchData = async () => {
		    let resp = await fetch(url,{
		    	method:"POST",
		    	headers:{
		    		"Content-Type": "application/json"
		    	},
		    	body:JSON.stringify(products),
		    })
		    resp = await resp.json()
		    //atualizando o states com o array de produtos 
		    setProducts( (prevProducts) => [...prevProducts,resp] )
	    }

		    
				
	useEffect
		faz com que uma determinada açao seja executada apenas vez
		isso é interessante pois os componentes estão sempre se renderizando
		presente sempre nas requisições assincronas 
		possui um array de dependencias, quando uma delas altera o useEffect é executado 
			exemplo:
				funcao executada uma unica vez em App.js, para buscar dados de produtos via requisicao, trazendo dados do back
			useEffect( () => {
				async function fetchData(){
					const resp = await fetch(url)
					const data = await resp.jon()
					setProducts(data)
				}
				fetchData()
			},[]) 

		

>> Seção 8: React Router 
	precisa instalar
		npm i react-router-dom
		import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom'
		<BrowserRouter>
        	<Navbar />
				<Routes>
					<Route path='/' element={<Home />} />
					<Route path='/about' element={<About />} />
					{/* no match route 404 */}
					<Route path="*" element={<NotFound />} />
				</Routes>
      	</BrowserRouter>

	Link Ativo 
		import {Link, NavLink } from 'react-router-dom'
		trocar Link por NavLink 	
		<Link to="/">Home</Link>	
			<NavLink to="/">Home</NavLink>	
	Mudar de rota no js 
		import { useNavigate } from "react-router-dom"	
		const navigate = useNavigate();
		navigate("/home")	

	Passar parametro pera url
		em App.js
			<Route path="/products/:id" element={<Product />} />
			<Route path="/products/:id/info" element={<Info />} />
		
		No componente que vai pasar o parametro
			const Home = () => {
			  const url = "http://localhost:3000/products"
			  const {data: itens, error} = useFetch(url)
			  return (
			    <div>
			      <h1> Home </h1>
			      <h2>Produtos</h2>
			      {error && <p>{error}</p>}
			      <div className='products'>
			        {itens?.map(i => (<p key={i.id}>Nome: {i.name}
			        <Link to={`/products/${i.id}`}> Detalhes</Link>
			          </p>))}

			      </div>
			    </div>
			  )
			}	

		no componente filho:
			const {id} = useParams()			

>> Seção 9: Context API do React
	facilita o compartilhamento de um estado (variaves) entre componentes
	dados globais 
	o context precisa abracar os componentes que receberao seus valores
	geralmente colocamos no App.js ou index.js
	
	criando context (CounterContext.js):
		import { createContext,useState } from "react"
		export const CounterContext = createContext()
		//criar provider
		 export const CounterContextProvider = ({children}) =>{
		    const [counter,setCounter] = useState(1)
		    return (
		        <CounterContext.Provider value={{counter,setCounter}}>
		            {children}
		        </CounterContext.Provider>
		    )
		 }

	no index.js poe exemplo
		<CounterContextProvider>
        	<App />
    	</CounterContextProvider>

    no componente que vai usar o state compartilhado
    	import { CounterContext } from "../context/CounterContext"
    	import { useContext } from "react"
    	const Component = () => {
    		const {counter} = useContext(CounterContext)
    	}


>> Seção 10: Mini blog
	trabalhando/integrando projeto com Firebase Auth
	
>> Seção 11: Entenda os hooks do React
	npm i react-router-dom

	Focar em um elemento
		import React, { useRef} from "react";
		const inputRef = useRef();
		inputRef.current.focus();

		<input
          type="text"
          ref={inputRef}
          value={text}
          onChange={(e) => setText(e.target.value)}
        />

	Debug
		useDebugValue()	

>> Secao 17
	Instalar Typescript
		npm install typescript -g 
	
	Ver a versao instalada 
		tsc -v

	compilar
		tsc arquivo.tsc

	criar um app 
		npx create-react-app <nome> --template typescript	
		ou utilizar o vite
	
	Variáveis	
		const name:string = "Teste"
				:number
				:boolean
	Funcoes
		const funTeste = (n:string):string => {
			return `Ola,${n}`
		}	

	VS code (extensao)
		Typescript React code snippets
		infeng

		tsrafce
	
	Enum
	
		category: Category

		export enum Category{
			JS = "JavaScript",
			TS = "TypeScript"
		}
	
	Types
		type textOrNull = string | null 
		type fixed = "Isso" | "Ou" | "Aquilo" 

	Context API	

		No pai:
		interface IAppContext{
			language:string,
			projects:number
		}

		const contextvalue:IAppContext = {
			language:"javascript",
			projects:5
		}	

		export const AppContext = createContext<IAppContext,null>(null)

		no HTML
		<AppContext.Provider value={contextvalue}> </AppContext.Provider>


		No filho:
			import useContext e AppContext

			const details = useContext(AppContext)

			{details && (
				<h2>{details.language} </h2>
				h2>{details.projects} </h2>
			)}

	const addTaskhandler = (e:FormEvent<HTMLElemnt>) => {
		e.preventDefault()
		... 
		
	}





		

		

				



			 
						












			





